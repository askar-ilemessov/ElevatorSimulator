The Sandwich Making Chefs Problem. (This problem was first published as the cigarette 
smokers problem by S.Patil in 1971, and is one of several classic process coordination 
problems that are used to evaluate facilities for synchronizing concurrent threads and 
processes.)
 
This system has three chef threads and one agent thread. Each chef continuously 
makes a sandwich and then eats it. But to make and eat a sandwich, the chef needs three 
ingredients: bread, peanut butter, and jam. One of the chef threads has an infinite supply 
of bread, another has peanut butter, and the third has jam. The agent has an infinite 
supply of all three ingredients. The agent randomly selects two of the ingredients and 
places them on a table. The chef who has the remaining ingredient then makes and eats a 
sandwich, signaling the agent on completion. The agent then puts out another two of the 
three ingredients, and the cycle repeats.

Classes:

Main
	Just a place for the main function as it didn't fit nicely into any of the other classes.
	
	This contains main() which creates an instance of table, and each of the thread classes 
	and starts them.

Table
	Contains booleans representing the availability of each ingredient as well as functions 
	to stock or take ingredients (set the availability to true or false).

Agent
	A Thread class that makes a random set of two ingredients available and waits for them 
	to be taken. It loops this behavior 20 times.

Chef
	A abstract Thread class that makes a sandwich. Implemented three different ways:


	PBChef
		Waits for jam and bread to become available before "making a sandwich" and switching
		the resources back to unavailable.
	
	JamChef
		Waits for peanut butter and bread to become available before "making a sandwich" and switching
		the resources back to unavailable.
	
	BreadChef
		Waits for peanut butter and jam to become available before "making a sandwich" and switching
		the resources back to unavailable.
		
		
Setup Instructions

	Run from Main class.